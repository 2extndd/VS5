#!/usr/bin/env python3
"""
Test Web UI Items Function - –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫—É –≤ /items endpoint
"""

import sys
import os
from datetime import datetime
from urllib.parse import urlparse, parse_qs

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_items_function():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ items() –∏–∑ web_ui.py"""
    print("üåê –¢–ï–°–¢ WEB UI ITEMS FUNCTION")
    print("=" * 40)
    
    try:
        import db
        print("‚úÖ db –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # Test get_items function
        print("\nüìã –¢–µ—Å—Ç–∏—Ä—É—é db.get_items()...")
        items_data = db.get_items(limit=5)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items_data)} items")
        
        if not items_data:
            print("‚ö†Ô∏è  –ù–µ—Ç items –≤ –ë–î")
            return True
            
        # Check item structure
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É items...")
        for i, item in enumerate(items_data[:2]):
            print(f"   Item {i+1}: {len(item)} –ø–æ–ª–µ–π")
            print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {[type(field).__name__ for field in item]}")
            
            # Check each field
            for j, field in enumerate(item):
                print(f"      [{j}]: {field} ({type(field).__name__})")
                
        # Test timestamp conversion
        print("\n‚è∞ –¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é timestamp...")
        test_item = items_data[0]
        
        try:
            timestamp_field = test_item[4]  # timestamp is 5th field (index 4)
            print(f"   Raw timestamp: {timestamp_field} ({type(timestamp_field).__name__})")
            
            if timestamp_field is None:
                print("   ‚ùå Timestamp is None!")
                return False
                
            converted = datetime.fromtimestamp(timestamp_field).strftime('%Y-%m-%d %H:%M:%S')
            print(f"   ‚úÖ Converted timestamp: {converted}")
            
        except Exception as e:
            print(f"   ‚ùå Timestamp conversion failed: {e}")
            return False
        
        # Test URL parsing  
        print("\nüîó –¢–µ—Å—Ç–∏—Ä—É—é –ø–∞—Ä—Å–∏–Ω–≥ URL...")
        try:
            query_url = test_item[5]  # query is 6th field (index 5)
            print(f"   Query URL: {query_url}")
            
            if query_url:
                parsed_query = urlparse(query_url)
                query_params = parse_qs(parsed_query.query)
                search_text = query_params.get('search_text', [None])[0]
                print(f"   ‚úÖ Search text: {search_text}")
            else:
                print("   ‚ö†Ô∏è  Query URL is None")
                
        except Exception as e:
            print(f"   ‚ùå URL parsing failed: {e}")
            return False
        
        # Test formatted items creation (simulate web_ui logic)
        print("\nüé® –¢–µ—Å—Ç–∏—Ä—É—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ items...")
        try:
            formatted_items = []
            
            for item in items_data[:2]:
                formatted_item = {
                    'title': item[1],
                    'price': item[2], 
                    'currency': item[3],
                    'timestamp': datetime.fromtimestamp(item[4]).strftime('%Y-%m-%d %H:%M:%S'),
                    'query': parse_qs(urlparse(item[5]).query).get('search_text', [None])[0] if
                    parse_qs(urlparse(item[5]).query).get('search_text', [None])[0] else item[5],
                    'url': f'https://www.vinted.fr/items/{item[0]}',
                    'photo_url': item[6]
                }
                formatted_items.append(formatted_item)
                print(f"   ‚úÖ Formatted item: {formatted_item['title']}")
                
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(formatted_items)} items")
            
        except Exception as e:
            print(f"   ‚ùå Formatting failed: {e}")
            import traceback
            traceback.print_exc()
            return False
            
        # Test queries
        print("\nüìù –¢–µ—Å—Ç–∏—Ä—É—é db.get_queries()...")
        try:
            queries = db.get_queries()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(queries)} queries")
            
            if queries:
                for i, q in enumerate(queries[:2]):
                    print(f"   Query {i+1}: {len(q)} –ø–æ–ª–µ–π")
                    print(f"   ID: {q[0]}, URL: {q[1][:50]}...")
                    
        except Exception as e:
            print(f"   ‚ùå Queries test failed: {e}")
            return False
            
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ WEB UI –ü–†–û–®–õ–ò!")
        return True
        
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_items_function()
    if not success:
        sys.exit(1)