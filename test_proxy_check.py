#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import requests
import time
import db
from proxies import get_random_proxy, check_proxy, convert_proxy_string_to_dict
from logger import get_logger

logger = get_logger(__name__)

def test_all_proxies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ü–†–û–ö–°–ò...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ –±–∞–∑—ã
    all_proxies = []
    
    # –ò–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–î
    proxy_list_param = db.get_parameter("proxy_list")
    if proxy_list_param:
        proxy_list = eval(proxy_list_param)
        all_proxies.extend(proxy_list)
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(proxy_list)} –ø—Ä–æ–∫—Å–∏ –≤ –ë–î")
    
    # –ò–∑ –ø—Ä–æ–∫—Å–∏ —Å—Å—ã–ª–æ–∫  
    proxy_links_param = db.get_parameter("proxy_links")
    if proxy_links_param:
        print(f"üîó –ù–∞–π–¥–µ–Ω—ã proxy_links –≤ –ë–î")
    
    if not all_proxies:
        print("‚ùå –ù–ï–¢ –ü–†–û–ö–°–ò –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!")
        return [], []
        
    print(f"\nüß™ –¢–ï–°–¢–ò–†–£–Æ {len(all_proxies)} –ü–†–û–ö–°–ò...\n")
    
    working_proxies = []
    failed_proxies = []
    
    for i, proxy in enumerate(all_proxies, 1):
        print(f"[{i}/{len(all_proxies)}] –¢–µ—Å—Ç–∏—Ä—É—é: {proxy[:30]}...")
        
        start_time = time.time()
        is_working = check_proxy(proxy)
        test_time = time.time() - start_time
        
        if is_working:
            working_proxies.append(proxy)
            print(f"    ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ ({test_time:.2f}s)")
        else:
            failed_proxies.append(proxy)
            print(f"    ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢ ({test_time:.2f}s)")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –†–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)}")
    print(f"‚ùå –ù–µ—Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(failed_proxies)}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {len(working_proxies)/len(all_proxies)*100:.1f}%")
    
    if working_proxies:
        print(f"\nüéØ –†–ê–ë–û–ß–ò–ï –ü–†–û–ö–°–ò:")
        for proxy in working_proxies[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  ‚Ä¢ {proxy}")
        if len(working_proxies) > 5:
            print(f"  ... –∏ –µ—â–µ {len(working_proxies)-5}")
    
    return working_proxies, failed_proxies

def test_proxy_with_vinted():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ Vinted"""
    print("\nüéØ –¢–ï–°–¢–ò–†–£–Æ –ü–†–û–ö–°–ò –° VINTED API...")
    
    proxy = get_random_proxy()
    if not proxy:
        print("‚ùå –ù–ï–¢ –î–û–°–¢–£–ü–ù–´–• –ü–†–û–ö–°–ò!")
        return False
        
    print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–∫—Å–∏: {proxy}")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –≤ dict
    proxy_dict = convert_proxy_string_to_dict(proxy)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Vinted
    test_url = "https://www.vinted.de/api/v2/catalog/items"
    test_params = {
        'catalog_ids': '19',
        'price_to': '50.0',
        'currency': 'EUR',
        'brand_ids': '212366',
        'order': 'newest_first',
        'per_page': 5,
        'page': 1
    }
    
    headers = {
        "Accept": "application/json, text/plain, */*",
        "Accept-Language": "de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7",
        "Accept-Encoding": "gzip, deflate, br, zstd", 
        "Connection": "keep-alive",
        "Sec-Fetch-Dest": "empty", 
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin",
        "Sec-Ch-Ua": '"Google Chrome";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
        "Sec-Ch-Ua-Mobile": "?0",
        "Sec-Ch-Ua-Platform": '"Windows"',
        "Cache-Control": "no-cache",
        "Pragma": "no-cache",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
    }
    
    try:
        print("üì° –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –∫ Vinted API...")
        response = requests.get(
            test_url, 
            params=test_params,
            headers=headers,
            proxies=proxy_dict,
            timeout=30,
            allow_redirects=True
        )
        
        print(f"üìä Status Code: {response.status_code}")
        print(f"üìã Response Headers: {dict(response.headers)}")
        print(f"üìÑ Response Text (first 200 chars): {response.text[:200]}")
        
        if response.status_code == 200:
            try:
                json_data = response.json()
                if 'items' in json_data:
                    print(f"‚úÖ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ {len(json_data['items'])} —Ç–æ–≤–∞—Ä–æ–≤")
                    return True
                else:
                    print(f"‚ö†Ô∏è  200 OK, –Ω–æ –Ω–µ—Ç items –≤ –æ—Ç–≤–µ—Ç–µ: {list(json_data.keys())}")
            except Exception as e:
                print(f"‚ö†Ô∏è  200 OK, –Ω–æ JSON –ø–∞—Ä—Å–∏–Ω–≥ failed: {e}")
        elif response.status_code == 403:
            print("üõ°Ô∏è  403 Forbidden - Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç")
        else:
            print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {response.status_code}")
            
        return False
        
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –°–¢–ê–†–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ö–°–ò\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    try:
        db.get_db_connection()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–∫—Å–∏
    working_proxies, failed_proxies = test_all_proxies()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å Vinted API
    if working_proxies:
        test_proxy_with_vinted()
    
    print("\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")