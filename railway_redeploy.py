#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–¥–µ–ø–ª–æ—è Railway –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Vinted
"""
import os
import time
import threading
import requests
from datetime import datetime, timedelta, timezone
from logger import get_logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Railway
try:
    from railway_config import setup_railway_environment, get_service_id_from_cli
    setup_railway_environment()
    get_service_id_from_cli()
except ImportError:
    pass

logger = get_logger(__name__)

class RailwayRedeployManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–¥–µ–ø–ª–æ—è Railway"""
    
    def __init__(self):
        self.project_id = os.getenv('RAILWAY_PROJECT_ID', '101cc62f-b314-41d1-9b55-d58ae5c371ea')
        self.service_id = os.getenv('RAILWAY_SERVICE_ID')  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å
        self.api_token = os.getenv('RAILWAY_TOKEN')
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ HTTP –æ—à–∏–±–æ–∫
        self.error_403_count = 0
        self.first_403_time = None
        self.last_403_time = None
        
        self.error_401_count = 0
        self.first_401_time = None
        self.last_401_time = None
        
        self.error_429_count = 0
        self.first_429_time = None
        self.last_429_time = None
        
        # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        self.success_streak = 0
        self.success_threshold = 10  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ 10 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ë–î –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.redeploy_threshold_minutes = self._get_redeploy_threshold()
        self.max_http_errors = self._get_max_http_errors()
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö —Ä–µ–¥–µ–ø–ª–æ–µ–≤
        self.last_redeploy_time = self._load_last_redeploy_time()
        self.min_redeploy_interval_minutes = 3  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 10 –Ω–∞ 3 –º–∏–Ω—É—Ç—ã
        
        self.lock = threading.Lock()
        
        logger.info(f"[REDEPLOY] Initialized Railway Redeploy Manager")
        logger.info(f"[REDEPLOY] Project ID: {self.project_id}")
        logger.info(f"[REDEPLOY] Threshold: {self.redeploy_threshold_minutes} minutes")
        if self.last_redeploy_time:
            logger.info(f"[REDEPLOY] Last redeploy: {self.last_redeploy_time}")
    
    def _get_redeploy_threshold(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ä–æ–≥ —Ä–µ–¥–µ–ø–ª–æ—è –∏–∑ –ë–î"""
        try:
            import db
            threshold_str = db.get_parameter("redeploy_threshold_minutes")
            if threshold_str:
                return int(threshold_str)
        except Exception as e:
            logger.debug(f"[REDEPLOY] Could not load threshold from DB: {e}")
        return 4  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 –º–∏–Ω—É—Ç—ã
    
    def _get_max_http_errors(self):
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –∏–∑ –ë–î"""
        try:
            import db
            errors_str = db.get_parameter("max_http_errors")
            if errors_str:
                return int(errors_str)
        except Exception as e:
            logger.debug(f"[REDEPLOY] Could not load max_http_errors from DB: {e}")
        return 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –æ—à–∏–±–æ–∫
    
    def _load_last_redeploy_time(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–µ–ø–ª–æ—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import db
            last_redeploy_str = db.get_parameter("last_redeploy_time")
            if last_redeploy_str and last_redeploy_str != "None":
                return datetime.fromisoformat(last_redeploy_str)
        except Exception as e:
            logger.debug(f"[REDEPLOY] Could not load last redeploy time: {e}")
        return None
    
    def _save_last_redeploy_time(self, redeploy_time):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–µ–ø–ª–æ—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import db
            db.set_parameter("last_redeploy_time", redeploy_time.isoformat())
            logger.info(f"[REDEPLOY] Saved redeploy time to database: {redeploy_time}")
        except Exception as e:
            logger.error(f"[REDEPLOY] Could not save redeploy time: {e}")
    
    def report_403_error(self):
        """–°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ 403 –æ—à–∏–±–∫–∏"""
        with self.lock:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.success_streak = 0
            
            current_time = datetime.now(timezone(timedelta(hours=3)))
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è 403 –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π
            if self.first_403_time is None or (current_time - self.last_403_time).total_seconds() > 300:  # 5 –º–∏–Ω—É—Ç
                self.first_403_time = current_time
                self.error_403_count = 1
                logger.warning(f"[REDEPLOY] First 403 error detected at {current_time}")
            else:
                self.error_403_count += 1
                logger.warning(f"[REDEPLOY] 403 error #{self.error_403_count} detected at {current_time}")
            
            self.last_403_time = current_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 –æ—à–∏–±–æ–∫
            total_errors = self.error_403_count + self.error_401_count + self.error_429_count
            if total_errors % 10 == 0:
                logger.warning(f"[REDEPLOY] üìä Total errors reached: {total_errors} (403:{self.error_403_count}, 401:{self.error_401_count}, 429:{self.error_429_count})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å —Ä–µ–¥–µ–ø–ª–æ–π
            self._check_redeploy_needed()
    
    def report_401_error(self):
        """–°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ 401 –æ—à–∏–±–∫–∏"""
        with self.lock:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.success_streak = 0
            
            current_time = datetime.now(timezone(timedelta(hours=3)))
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è 401 –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π
            if self.first_401_time is None or (current_time - self.last_401_time).total_seconds() > 300:  # 5 –º–∏–Ω—É—Ç
                self.first_401_time = current_time
                self.error_401_count = 1
                logger.warning(f"[REDEPLOY] First 401 error detected at {current_time}")
            else:
                self.error_401_count += 1
                logger.warning(f"[REDEPLOY] 401 error #{self.error_401_count} detected at {current_time}")
            
            self.last_401_time = current_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 –æ—à–∏–±–æ–∫
            total_errors = self.error_403_count + self.error_401_count + self.error_429_count
            if total_errors % 10 == 0:
                logger.warning(f"[REDEPLOY] üìä Total errors reached: {total_errors} (403:{self.error_403_count}, 401:{self.error_401_count}, 429:{self.error_429_count})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å —Ä–µ–¥–µ–ø–ª–æ–π
            self._check_redeploy_needed()
    
    def report_429_error(self):
        """–°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ 429 –æ—à–∏–±–∫–∏"""
        with self.lock:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.success_streak = 0
            
            current_time = datetime.now(timezone(timedelta(hours=3)))
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è 429 –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π
            if self.first_429_time is None or (current_time - self.last_429_time).total_seconds() > 300:  # 5 –º–∏–Ω—É—Ç
                self.first_429_time = current_time
                self.error_429_count = 1
                logger.warning(f"[REDEPLOY] First 429 error detected at {current_time}")
            else:
                self.error_429_count += 1
                logger.warning(f"[REDEPLOY] 429 error #{self.error_429_count} detected at {current_time}")
            
            self.last_429_time = current_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 –æ—à–∏–±–æ–∫
            total_errors = self.error_403_count + self.error_401_count + self.error_429_count
            if total_errors % 10 == 0:
                logger.warning(f"[REDEPLOY] üìä Total errors reached: {total_errors} (403:{self.error_403_count}, 401:{self.error_401_count}, 429:{self.error_429_count})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å —Ä–µ–¥–µ–ø–ª–æ–π
            self._check_redeploy_needed()
    
    def report_success(self):
        """–°–æ–æ–±—â–∏—Ç—å –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
        with self.lock:
            total_errors = self.error_403_count + self.error_401_count + self.error_429_count
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
            self.success_streak += 1
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
            if total_errors > 0 and self.success_streak >= self.success_threshold:
                logger.info(f"[REDEPLOY] ‚úÖ {self.success_threshold} successful requests in a row!")
                logger.info(f"[REDEPLOY] Resetting error counters - 403:{self.error_403_count}, 401:{self.error_401_count}, 429:{self.error_429_count}")
                # –°–±—Ä–æ—Å 403 –æ—à–∏–±–æ–∫
                self.error_403_count = 0
                self.first_403_time = None
                self.last_403_time = None
                # –°–±—Ä–æ—Å 401 –æ—à–∏–±–æ–∫
                self.error_401_count = 0
                self.first_401_time = None
                self.last_401_time = None
                # –°–±—Ä–æ—Å 429 –æ—à–∏–±–æ–∫
                self.error_429_count = 0
                self.first_429_time = None
                self.last_429_time = None
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º streak
                self.success_streak = 0
    
    def _check_redeploy_needed(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–µ–Ω –ª–∏ —Ä–µ–¥–µ–ø–ª–æ–π"""
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –æ—à–∏–±–∫—É –∏–∑ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
        first_error_times = [t for t in [self.first_403_time, self.first_401_time, self.first_429_time] if t is not None]
        if not first_error_times:
            return
        
        first_error_time = min(first_error_times)
        total_errors = self.error_403_count + self.error_401_count + self.error_429_count
        
        current_time = datetime.now(timezone(timedelta(hours=3)))
        time_since_first_error = current_time - first_error_time
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏)
        if total_errors >= 50:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –º–Ω–æ–≥–æ
            logger.info(f"[REDEPLOY] Check: {total_errors} errors, {time_since_first_error.total_seconds():.0f}s since first, success_streak: {self.success_streak}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å 100+ –æ—à–∏–±–æ–∫ - —Ä–µ–¥–µ–ø–ª–æ–∏–º –ù–ï–ú–ï–î–õ–ï–ù–ù–û!
        if total_errors >= 100:
            logger.critical(f"[REDEPLOY] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            logger.critical(f"[REDEPLOY] üö® CRITICAL THRESHOLD REACHED!")
            logger.critical(f"[REDEPLOY] Total errors: {total_errors}")
            logger.critical(f"[REDEPLOY] - 403 errors: {self.error_403_count}")
            logger.critical(f"[REDEPLOY] - 401 errors: {self.error_401_count}")
            logger.critical(f"[REDEPLOY] - 429 errors: {self.error_429_count}")
            logger.critical(f"[REDEPLOY] - Time since first error: {time_since_first_error}")
            logger.critical(f"[REDEPLOY] - Success streak: {self.success_streak}")
            logger.critical(f"[REDEPLOY] - Last redeploy: {self.last_redeploy_time}")
            logger.critical(f"[REDEPLOY] üö® Forcing IMMEDIATE redeploy (bypassing cooldown)!")
            logger.critical(f"[REDEPLOY] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            self._perform_redeploy()
            return
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–µ–¥–µ–ø–ª–æ—è:
        # 1. –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ threshold_minutes —Å –ø–µ—Ä–≤–æ–π HTTP –æ—à–∏–±–∫–∏ (–ª—é–±–æ–π: 401, 403, 429)
        # 2. –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ HTTP –æ—à–∏–±–æ–∫ —Å—É–º–º–∞—Ä–Ω–æ
        # 3. –° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–µ–ø–ª–æ—è –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        
        if (time_since_first_error.total_seconds() >= self.redeploy_threshold_minutes * 60 and 
            total_errors >= self.max_http_errors):
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–µ–ª–∞–ª–∏ –ª–∏ —Ä–µ–¥–µ–ø–ª–æ–π –Ω–µ–¥–∞–≤–Ω–æ
            if (self.last_redeploy_time is None or 
                (current_time - self.last_redeploy_time).total_seconds() >= self.min_redeploy_interval_minutes * 60):
                
                logger.critical(f"[REDEPLOY] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                logger.critical(f"[REDEPLOY] ‚ö†Ô∏è  NORMAL REDEPLOY CONDITIONS MET")
                logger.critical(f"[REDEPLOY] - Time since first error: {time_since_first_error} (threshold: {self.redeploy_threshold_minutes}min)")
                logger.critical(f"[REDEPLOY] - Total errors: {total_errors} (threshold: {self.max_http_errors})")
                logger.critical(f"[REDEPLOY]   * 403 errors: {self.error_403_count}")
                logger.critical(f"[REDEPLOY]   * 401 errors: {self.error_401_count}")
                logger.critical(f"[REDEPLOY]   * 429 errors: {self.error_429_count}")
                logger.critical(f"[REDEPLOY] - Success streak: {self.success_streak}")
                logger.critical(f"[REDEPLOY] - Last redeploy: {self.last_redeploy_time}")
                logger.critical(f"[REDEPLOY] ‚ö†Ô∏è  Initiating automatic redeploy...")
                logger.critical(f"[REDEPLOY] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                
                self._perform_redeploy()
            else:
                time_since_last_redeploy = current_time - self.last_redeploy_time
                logger.warning(f"[REDEPLOY] ‚è∏Ô∏è  Redeploy needed but blocked by cooldown")
                logger.warning(f"[REDEPLOY] - Time since last redeploy: {time_since_last_redeploy} (need {self.min_redeploy_interval_minutes}min)")
                logger.warning(f"[REDEPLOY] - Current errors: {total_errors} (403:{self.error_403_count}, 401:{self.error_401_count}, 429:{self.error_429_count})")
    
    def _perform_redeploy(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ Railway API"""
        try:
            logger.info("[REDEPLOY] üîÑ _perform_redeploy() called")
            logger.info(f"[REDEPLOY] Checking Railway API token...")
            
            if not self.api_token:
                logger.error("[REDEPLOY] ‚ùå Railway API token not found in environment")
                logger.info("[REDEPLOY] Falling back to alternative redeploy methods...")
                self._fallback_redeploy()
                return
            
            # Railway GraphQL API endpoint
            url = "https://backboard.railway.com/graphql/v2"
            
            # GraphQL mutation –¥–ª—è —Ä–µ–¥–µ–ø–ª–æ—è
            mutation = """
            mutation serviceRedeploy($serviceId: String!) {
                serviceRedeploy(serviceId: $serviceId) {
                    id
                }
            }
            """
            
            headers = {
                "Authorization": f"Bearer {self.api_token}",
                "Content-Type": "application/json"
            }
            
            # –ï—Å–ª–∏ service_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ
            if not self.service_id:
                self.service_id = self._get_service_id()
                if not self.service_id:
                    logger.error("[REDEPLOY] Could not get service ID. Using fallback method.")
                    self._fallback_redeploy()
                    return
            
            payload = {
                "query": mutation,
                "variables": {
                    "serviceId": self.service_id
                }
            }
            
            logger.info(f"[REDEPLOY] Sending redeploy request to Railway API...")
            response = requests.post(url, json=payload, headers=headers, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                if "errors" not in result:
                    logger.info("[REDEPLOY] ‚úÖ Railway redeploy initiated successfully!")
                    self.last_redeploy_time = datetime.now(timezone(timedelta(hours=3)))
                    self._save_last_redeploy_time(self.last_redeploy_time)
                    self._reset_error_tracking()
                else:
                    logger.error(f"[REDEPLOY] GraphQL errors: {result.get('errors')}")
                    self._fallback_redeploy()
            else:
                logger.error(f"[REDEPLOY] API request failed: {response.status_code} - {response.text}")
                self._fallback_redeploy()
                
        except Exception as e:
            logger.error(f"[REDEPLOY] Exception during redeploy: {e}")
            self._fallback_redeploy()
    
    def _get_service_id(self):
        """–ü–æ–ª—É—á–∏—Ç—å Service ID –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            url = "https://backboard.railway.com/graphql/v2"
            
            query = """
            query project($projectId: String!) {
                project(id: $projectId) {
                    services {
                        edges {
                            node {
                                id
                                name
                            }
                        }
                    }
                }
            }
            """
            
            headers = {
                "Authorization": f"Bearer {self.api_token}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "query": query,
                "variables": {
                    "projectId": self.project_id
                }
            }
            
            response = requests.post(url, json=payload, headers=headers, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                services = result.get("data", {}).get("project", {}).get("services", {}).get("edges", [])
                
                # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å (–æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–π –∏–ª–∏ —Å –∏–º–µ–Ω–µ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "app", "web", "main")
                for service in services:
                    service_node = service.get("node", {})
                    service_name = service_node.get("name", "").lower()
                    service_id = service_node.get("id")
                    
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                    if any(keyword in service_name for keyword in ["app", "web", "main", "vs5"]):
                        logger.info(f"[REDEPLOY] Found main service: {service_name} ({service_id})")
                        return service_id
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
                if services:
                    first_service = services[0].get("node", {})
                    service_id = first_service.get("id")
                    service_name = first_service.get("name", "unknown")
                    logger.info(f"[REDEPLOY] Using first service: {service_name} ({service_id})")
                    return service_id
            
            logger.error("[REDEPLOY] Could not retrieve service ID from Railway API")
            return None
            
        except Exception as e:
            logger.error(f"[REDEPLOY] Error getting service ID: {e}")
            return None
    
    def _fallback_redeploy(self):
        """Fallback –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ CLI –∫–æ–º–∞–Ω–¥—É"""
        try:
            logger.info("[REDEPLOY] Attempting fallback redeploy via Railway CLI...")
            
            import subprocess
            
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ CLI
            result = subprocess.run(
                ["railway", "redeploy", "-y"],
                capture_output=True,
                text=True,
                timeout=60,
                cwd=os.getcwd()
            )
            
            logger.info(f"[REDEPLOY] CLI command result: return_code={result.returncode}")
            logger.info(f"[REDEPLOY] CLI stdout: {result.stdout}")
            logger.info(f"[REDEPLOY] CLI stderr: {result.stderr}")
            
            if result.returncode == 0:
                logger.info("[REDEPLOY] ‚úÖ Railway redeploy via CLI successful!")
                self.last_redeploy_time = datetime.now(timezone(timedelta(hours=3)))
                self._save_last_redeploy_time(self.last_redeploy_time)
                self._reset_error_tracking()
                return True
            else:
                logger.error(f"[REDEPLOY] CLI redeploy failed: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("[REDEPLOY] CLI redeploy timed out")
            return False
        except FileNotFoundError:
            logger.error("[REDEPLOY] Railway CLI not found in production environment")
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            return self._emergency_redeploy()
        except Exception as e:
            logger.error(f"[REDEPLOY] Fallback redeploy failed: {e}")
            return False
    
    def _emergency_redeploy(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ–¥–µ–ø–ª–æ—è —á–µ—Ä–µ–∑ webhook –∏–ª–∏ –ø—Ä—è–º–æ–π —Ç—Ä–∏–≥–≥–µ—Ä"""
        try:
            logger.critical("[REDEPLOY] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            logger.critical("[REDEPLOY] üö® EMERGENCY REDEPLOY METHOD ACTIVATED")
            logger.critical("[REDEPLOY] Reason: Railway API and CLI methods failed")
            logger.critical("[REDEPLOY] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–µ–¥–µ–ø–ª–æ—è
            self.last_redeploy_time = datetime.now(timezone(timedelta(hours=3)))
            logger.info(f"[REDEPLOY] Recording redeploy time: {self.last_redeploy_time}")
            self._save_last_redeploy_time(self.last_redeploy_time)
            self._reset_error_tracking()
            logger.info("[REDEPLOY] Error tracking reset")
            
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Railway webhook (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            webhook_url = os.getenv('RAILWAY_REDEPLOY_WEBHOOK')
            if webhook_url:
                try:
                    logger.info("[REDEPLOY] Attempting redeploy via webhook...")
                    response = requests.post(webhook_url, timeout=10)
                    if response.status_code in [200, 201, 202]:
                        logger.info("[REDEPLOY] ‚úÖ Webhook redeploy successful!")
                        return True
                except Exception as e:
                    logger.warning(f"[REDEPLOY] Webhook failed: {e}")
            
            # –ú–µ—Ç–æ–¥ 2: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä –∏ –¥–µ–ª–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥
            # Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç —É–ø–∞–≤—à–∏–π —Å–µ—Ä–≤–∏—Å
            logger.critical("[REDEPLOY] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            logger.critical("[REDEPLOY] üí• METHOD 2: Forcing application crash")
            logger.critical("[REDEPLOY] Note: Railway should auto-restart the service")
            logger.critical("[REDEPLOY] If bot doesn't restart - manual action required!")
            logger.critical("[REDEPLOY] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            
            try:
                with open('/tmp/redeploy_requested', 'w') as f:
                    f.write(str(self.last_redeploy_time))
                logger.info("[REDEPLOY] ‚úÖ Created redeploy marker file: /tmp/redeploy_requested")
            except Exception as e:
                logger.warning(f"[REDEPLOY] ‚ö†Ô∏è  Failed to create marker file: {e}")
            
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ —Å –æ—à–∏–±–∫–æ–π - Railway –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç
            import signal
            logger.critical("[REDEPLOY] üì§ Sending SIGTERM signal to own process...")
            logger.critical(f"[REDEPLOY] Process ID: {os.getpid()}")
            os.kill(os.getpid(), signal.SIGTERM)
            
            # –ï—Å–ª–∏ SIGTERM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –¥–µ–ª–∞–µ–º hard exit
            import threading
            def delayed_exit():
                import time
                time.sleep(2)
                logger.critical("[REDEPLOY] Hard exit...")
                os._exit(1)
            
            thread = threading.Thread(target=delayed_exit)
            thread.daemon = True
            thread.start()
            
            return True
            
        except Exception as e:
            logger.error(f"[REDEPLOY] Emergency redeploy failed: {e}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - hard crash
            try:
                os._exit(1)
            except:
                return False
    
    def _reset_error_tracking(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–¥–µ–ø–ª–æ—è"""
        # –°–±—Ä–æ—Å 403 –æ—à–∏–±–æ–∫
        self.error_403_count = 0
        self.first_403_time = None
        self.last_403_time = None
        # –°–±—Ä–æ—Å 401 –æ—à–∏–±–æ–∫
        self.error_401_count = 0
        self.first_401_time = None
        self.last_401_time = None
        # –°–±—Ä–æ—Å 429 –æ—à–∏–±–æ–∫
        self.error_429_count = 0
        self.first_429_time = None
        self.last_429_time = None
        logger.info("[REDEPLOY] All error tracking reset after redeploy")
    
    def get_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Ä–µ–¥–µ–ø–ª–æ—è"""
        with self.lock:
            current_time = datetime.now(timezone(timedelta(hours=3)))
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –æ—à–∏–±–∫—É –∏–∑ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
            first_error_times = [t for t in [self.first_403_time, self.first_401_time, self.first_429_time] if t is not None]
            first_error_time = min(first_error_times) if first_error_times else None
            total_errors = self.error_403_count + self.error_401_count + self.error_429_count
            
            status = {
                # 403 –æ—à–∏–±–∫–∏
                "error_403_count": self.error_403_count,
                "first_403_time": self.first_403_time.isoformat() if self.first_403_time else None,
                "last_403_time": self.last_403_time.isoformat() if self.last_403_time else None,
                
                # 401 –æ—à–∏–±–∫–∏
                "error_401_count": self.error_401_count,
                "first_401_time": self.first_401_time.isoformat() if self.first_401_time else None,
                "last_401_time": self.last_401_time.isoformat() if self.last_401_time else None,
                
                # 429 –æ—à–∏–±–∫–∏
                "error_429_count": self.error_429_count,
                "first_429_time": self.first_429_time.isoformat() if self.first_429_time else None,
                "last_429_time": self.last_429_time.isoformat() if self.last_429_time else None,
                
                # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                "total_errors": total_errors,
                "success_streak": self.success_streak,
                "success_threshold": self.success_threshold,
                "last_redeploy_time": self.last_redeploy_time.isoformat() if self.last_redeploy_time else None,
                "redeploy_threshold_minutes": self.redeploy_threshold_minutes,
                "max_http_errors": self.max_http_errors
            }
            
            if first_error_time:
                time_since_first = current_time - first_error_time
                status["time_since_first_error_seconds"] = time_since_first.total_seconds()
                status["redeploy_needed"] = (
                    time_since_first.total_seconds() >= self.redeploy_threshold_minutes * 60 and
                    total_errors >= self.max_http_errors
                )
            
            return status

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
redeploy_manager = RailwayRedeployManager()

def report_403_error():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ 403 –æ—à–∏–±–∫–µ"""
    redeploy_manager.report_403_error()

def report_401_error():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ 401 –æ—à–∏–±–∫–µ"""
    redeploy_manager.report_401_error()

def report_429_error():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ 429 –æ—à–∏–±–∫–µ"""
    redeploy_manager.report_429_error()

def report_success():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    redeploy_manager.report_success()

def get_redeploy_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Ä–µ–¥–µ–ø–ª–æ—è"""
    return redeploy_manager.get_status()