#!/usr/bin/env python3
"""
Railway Database Test - —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç PostgreSQL –Ω–∞ Railway
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é —Ü–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
"""

import sys
import os
import requests
import time

def test_railway_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Railway PostgreSQL —á–µ—Ä–µ–∑ API"""
    print("üöÇ –¢–ï–°–¢ RAILWAY POSTGRESQL")
    print("=" * 40)
    
    base_url = "https://vs5-production.up.railway.app"
    
    try:
        # Test 1: Check if web UI is working
        print("üåê –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Web UI...")
        response = requests.get(f"{base_url}/", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Web UI –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ùå Web UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
            
        # Test 2: Check items endpoint
        print("\nüìã –ü—Ä–æ–≤–µ—Ä—è—é /items endpoint...")
        response = requests.get(f"{base_url}/items", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Items endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # Check if "No items found" is in response
            if "No items found" in response.text:
                print("‚ö†Ô∏è  'No items found' - —Ç–æ–≤–∞—Ä—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î")
            else:
                print("‚úÖ –¢–æ–≤–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î!")
                
        else:
            print(f"‚ùå Items endpoint error: {response.status_code}")
            
        # Test 3: Check logs for database errors
        print("\nüìä –ü—Ä–æ–≤–µ—Ä—è—é –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏ –ë–î...")
        try:
            response = requests.get(f"{base_url}/api/logs?limit=100", timeout=10)
            if response.status_code == 200:
                logs_data = response.json()
                logs = logs_data.get('logs', [])
                
                # Look for database errors
                db_errors = []
                price_errors = []
                success_logs = []
                
                for log in logs:
                    message = log.get('message', '')
                    if 'Error adding item' in message and 'database' in message:
                        db_errors.append(message)
                    if 'invalid input syntax for type bigint' in message:
                        price_errors.append(message)
                    if 'Successfully added item' in message and 'database' in message:
                        success_logs.append(message)
                
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(db_errors)} –æ—à–∏–±–æ–∫ –ë–î")
                print(f"üí∞ –ù–∞–π–¥–µ–Ω–æ {len(price_errors)} –æ—à–∏–±–æ–∫ —Ü–µ–Ω")
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(success_logs)} —É—Å–ø–µ—à–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–π")
                
                if price_errors:
                    print("‚ùå –û–®–ò–ë–ö–ò –¶–ï–ù –í–°–ï –ï–©–ï –ï–°–¢–¨:")
                    for error in price_errors[:3]:
                        print(f"   - {error[:100]}...")
                    return False
                    
                if success_logs:
                    print("‚úÖ –¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è:")
                    for success in success_logs[:3]:
                        print(f"   + {success[:100]}...")
                        
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏: {e}")
            
        # Test 4: Check configuration
        print("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        try:
            response = requests.get(f"{base_url}/config", timeout=10)
            if response.status_code == 200:
                print("‚úÖ Configuration –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                print(f"‚ö†Ô∏è  Configuration –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            
        # Test 5: Try to trigger a scan (if possible)
        print("\nüîÑ –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        try:
            # Just check if queries exist
            response = requests.get(f"{base_url}/queries", timeout=10)
            if response.status_code == 200:
                if "D&G" in response.text or "query" in response.text.lower():
                    print("‚úÖ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                else:
                    print("‚ö†Ô∏è  –ó–∞–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print(f"‚ö†Ô∏è  Queries endpoint: {response.status_code}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            
        print("\nüèÅ –¢–ï–°–¢ RAILWAY –ó–ê–í–ï–†–®–ï–ù")
        return True
        
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

def test_migration_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("\nüîß –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 30)
    
    base_url = "https://vs5-production.up.railway.app"
    
    try:
        # Check recent logs for migration
        response = requests.get(f"{base_url}/api/logs?limit=200&level=all", timeout=10)
        
        if response.status_code == 200:
            logs_data = response.json()
            logs = logs_data.get('logs', [])
            
            migration_logs = []
            schema_logs = []
            
            for log in logs:
                message = log.get('message', '')
                if 'migration' in message.lower():
                    migration_logs.append(message)
                if 'schema' in message.lower() or 'database creation' in message.lower():
                    schema_logs.append(message)
            
            if migration_logs:
                print("üîß –õ–æ–≥–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:")
                for log in migration_logs[:5]:
                    print(f"   - {log}")
            else:
                print("‚ö†Ô∏è  –õ–æ–≥–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            if schema_logs:
                print("\nüìã –õ–æ–≥–∏ —Å—Ö–µ–º—ã –ë–î:")
                for log in schema_logs[:3]:
                    print(f"   - {log}")
                    
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –ü–û–õ–ù–´–ô –¢–ï–°–¢ RAILWAY DATABASE")
    print("=" * 50)
    
    # Test Railway
    railway_ok = test_railway_database()
    
    # Test Migration
    migration_ok = test_migration_status()
    
    if railway_ok and migration_ok:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ RAILWAY –ü–†–û–®–õ–ò!")
    else:
        print("\nüí• –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° RAILWAY!")
        sys.exit(1)