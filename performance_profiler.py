#!/usr/bin/env python3
"""
Performance Profiler –¥–ª—è Vinted –±–æ—Ç–∞
–ò–∑–º–µ—Ä—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""
import time
from datetime import datetime, timezone, timedelta
from logger import get_logger

logger = get_logger(__name__)

class PerformanceProfiler:
    """–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    
    def __init__(self):
        self.metrics = {}
        self.start_times = {}
        self.total_stats = {
            'cycle_start_to_api_request': [],
            'api_request_to_response': [],
            'response_parsing': [],
            'db_check_time': [],
            'db_insert_time': [],
            'item_published_to_found': [],  # timestamp –≤–µ—â–∏ –¥–æ found_at
            'total_latency': []  # –û—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î
        }
    
    def start_timer(self, name):
        """–ù–∞—á–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ"""
        self.start_times[name] = time.time()
        logger.info(f"[PERF] ‚è±Ô∏è START: {name}")
    
    def end_timer(self, name):
        """–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å –≤—Ä–µ–º—è"""
        if name not in self.start_times:
            logger.warning(f"[PERF] ‚ö†Ô∏è Timer {name} was not started")
            return 0
        
        elapsed = time.time() - self.start_times[name]
        self.metrics[name] = elapsed
        logger.info(f"[PERF] ‚èπÔ∏è END: {name} = {elapsed:.3f}s ({elapsed*1000:.0f}ms)")
        del self.start_times[name]
        return elapsed
    
    def record_metric(self, name, value):
        """–ó–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é"""
        self.metrics[name] = value
        logger.info(f"[PERF] üìä METRIC: {name} = {value:.3f}s ({value*1000:.0f}ms)")
    
    def calculate_item_latency(self, item_timestamp, found_at):
        """–í—ã—á–∏—Å–ª–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–µ—â–∏ –¥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–æ—Ç–æ–º"""
        try:
            latency = found_at - item_timestamp
            self.total_stats['item_published_to_found'].append(latency)
            logger.info(f"[PERF] üéØ Item latency: {latency:.3f}s ({latency*1000:.0f}ms)")
            return latency
        except:
            return 0
    
    def add_to_stats(self, category, value):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if category in self.total_stats:
            self.total_stats[category].append(value)
    
    def get_summary(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        summary = {
            'current_metrics': self.metrics.copy(),
            'statistics': {}
        }
        
        for category, values in self.total_stats.items():
            if values:
                summary['statistics'][category] = {
                    'min': min(values),
                    'max': max(values),
                    'avg': sum(values) / len(values),
                    'count': len(values),
                    'total': sum(values)
                }
        
        return summary
    
    def log_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É –≤ –ª–æ–≥"""
        summary = self.get_summary()
        
        logger.info("=" * 80)
        logger.info("üìä PERFORMANCE SUMMARY")
        logger.info("=" * 80)
        
        if summary['current_metrics']:
            logger.info("\nüîπ Current Cycle Metrics:")
            for name, value in summary['current_metrics'].items():
                logger.info(f"  {name:40} {value:8.3f}s ({value*1000:8.0f}ms)")
        
        if summary['statistics']:
            logger.info("\nüîπ Overall Statistics:")
            for category, stats in summary['statistics'].items():
                logger.info(f"\n  {category}:")
                logger.info(f"    Min: {stats['min']:.3f}s ({stats['min']*1000:.0f}ms)")
                logger.info(f"    Avg: {stats['avg']:.3f}s ({stats['avg']*1000:.0f}ms)")
                logger.info(f"    Max: {stats['max']:.3f}s ({stats['max']*1000:.0f}ms)")
                logger.info(f"    Count: {stats['count']} samples")
        
        logger.info("=" * 80)
        
        return summary
    
    def reset_current(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞)"""
        self.metrics = {}
        self.start_times = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫–∞
profiler = PerformanceProfiler()

def get_profiler():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫"""
    return profiler

