#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ Railway
"""

import requests
import re
import time
import json
from datetime import datetime

def test_proxy_link():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–∫—Å–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–∫—Å–∏...")
    print("=" * 50)
    
    proxy_url = "https://sx-list.org/jXqrKIfIr2A87CEAsnKeHJ3OIroEhO5n.txt?limit=100&type=res&use_login_and_password=1&country=DE"
    
    try:
        response = requests.get(proxy_url, timeout=10)
        if response.status_code == 200:
            proxies_text = response.text.strip()
            proxies_list = [p.strip() for p in proxies_text.split() if p.strip()]
            
            print(f"‚úÖ –°—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {len(proxies_list)}")
            print(f"üìã –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–∫—Å–∏:")
            for i, proxy in enumerate(proxies_list[:3], 1):
                print(f"  {i}. {proxy}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏
            if proxies_list and '@' in proxies_list[0] and ':' in proxies_list[0]:
                print(f"‚úÖ –§–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
            else:
                print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏")
                
            return len(proxies_list) > 0
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")
        return False

def check_railway_proxy_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏ –Ω–∞ Railway"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –Ω–∞ Railway...")
    print("=" * 50)
    
    try:
        config_url = "https://vs5-production.up.railway.app/config"
        response = requests.get(config_url, timeout=10)
        
        if response.status_code == 200:
            html_content = response.text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Proxy List
            proxy_list_match = re.search(r'name="proxy_list"[^>]*value="([^"]*)"', html_content)
            proxy_list_value = proxy_list_match.group(1) if proxy_list_match else ""
            
            print(f"üìã Proxy List:")
            if len(proxy_list_value) > 0:
                print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ –ø—É—Å—Ç–æ–π ({len(proxy_list_value)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"  ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {proxy_list_value[:100]}...")
            else:
                print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ü—É—Å—Ç–æ–π (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Proxy List Link
            proxy_link_match = re.search(r'name="proxy_list_link"[^>]*value="([^"]*)"', html_content)
            proxy_link_value = proxy_link_match.group(1) if proxy_link_match else ""
            
            print(f"üìã Proxy List Link:")
            if proxy_link_value:
                print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω")
                print(f"  ‚Ä¢ URL: {proxy_link_value}")
            else:
                print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Check Proxies
            check_proxies_enabled = 'name="check_proxies"' in html_content and 'checked' in html_content
            print(f"üìã Check Proxies: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if check_proxies_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}")
            
            return proxy_link_value != "" and len(proxy_list_value) == 0
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def check_railway_logs():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ Railway"""
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ Railway...")
    print("=" * 50)
    
    try:
        logs_url = "https://vs5-production.up.railway.app/logs"
        response = requests.get(logs_url, timeout=15)
        
        if response.status_code == 200:
            html_content = response.text
            
            # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö
            log_pattern = r'<div[^>]*class="[^"]*log[^"]*"[^>]*>(.*?)</div>'
            log_entries = re.findall(log_pattern, html_content, re.DOTALL | re.IGNORECASE)
            
            if not log_entries:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
                log_pattern = r'<pre[^>]*>(.*?)</pre>'
                log_entries = re.findall(log_pattern, html_content, re.DOTALL)
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö: {len(log_entries)}")
            
            if log_entries:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                recent_logs = log_entries[-20:] if len(log_entries) > 20 else log_entries
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
                proxy_mentions = 0
                error_403_count = 0
                process_items_calls = 0
                scheduler_events = 0
                
                for log in recent_logs:
                    log_text = log.lower()
                    if 'proxy' in log_text:
                        proxy_mentions += 1
                    if '403' in log_text or 'forbidden' in log_text:
                        error_403_count += 1
                    if 'process_items' in log_text:
                        process_items_calls += 1
                    if 'scheduler' in log_text:
                        scheduler_events += 1
                
                print(f"üìä –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤:")
                print(f"  ‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {proxy_mentions}")
                print(f"  ‚Ä¢ –û—à–∏–±–∫–∏ 403: {error_403_count}")
                print(f"  ‚Ä¢ –í—ã–∑–æ–≤—ã process_items: {process_items_calls}")
                print(f"  ‚Ä¢ –°–æ–±—ã—Ç–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {scheduler_events}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:")
                for i, log in enumerate(recent_logs[-5:], 1):
                    clean_log = re.sub(r'<[^>]+>', '', log).strip()[:100]
                    print(f"  {i}. {clean_log}...")
                
                return {
                    'proxy_mentions': proxy_mentions,
                    'error_403_count': error_403_count,
                    'process_items_calls': process_items_calls,
                    'scheduler_events': scheduler_events
                }
            else:
                print("‚ùå –ó–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return None
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤: {e}")
        return None

def check_railway_queries():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ Railway"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ Railway...")
    print("=" * 50)
    
    try:
        queries_url = "https://vs5-production.up.railway.app/queries"
        response = requests.get(queries_url, timeout=10)
        
        if response.status_code == 200:
            html_content = response.text
            
            # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            queries_match = re.search(r'Found (\d+) queries|(\d+) queries found', html_content, re.IGNORECASE)
            if queries_match:
                queries_count = queries_match.group(1) or queries_match.group(2)
                print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {queries_count}")
            else:
                print("üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–µ—â–∞—Ö
            last_found_pattern = r'Last Found Item.*?(\d{4}-\d{2}-\d{2}|\w+)'
            last_found_matches = re.findall(last_found_pattern, html_content, re.IGNORECASE)
            
            if last_found_matches:
                print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–µ—â–∏:")
                for i, match in enumerate(last_found_matches[:3], 1):
                    print(f"  {i}. {match}")
            else:
                print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–µ—â–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            return True
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ø—Ä–æ—Å–∞–º: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        return False

def check_railway_items():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—â–∏ –Ω–∞ Railway"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—â–µ–π –Ω–∞ Railway...")
    print("=" * 50)
    
    try:
        items_url = "https://vs5-production.up.railway.app/items"
        response = requests.get(items_url, timeout=10)
        
        if response.status_code == 200:
            html_content = response.text
            
            # –ò—â–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π
            total_match = re.search(r'Total Items?\s*:?\s*(\d+)', html_content, re.IGNORECASE)
            if total_match:
                total_items = total_match.group(1)
                print(f"üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π: {total_items}")
            else:
                print("üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—â–∏
            recent_items_pattern = r'(\d{4}-\d{2}-\d{2})'
            recent_dates = re.findall(recent_items_pattern, html_content)
            
            if recent_dates:
                unique_dates = list(set(recent_dates))[-3:]
                print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—â–µ–π:")
                for date in sorted(unique_dates, reverse=True):
                    print(f"  ‚Ä¢ {date}")
            else:
                print("üìã –î–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—â–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            return True
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ—â–∞–º: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—â–µ–π: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üöÄ –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê RAILWAY –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–∫—Å–∏
    proxy_link_ok = test_proxy_link()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_ok = check_railway_proxy_config()
    
    # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
    logs_analysis = check_railway_logs()
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
    queries_ok = check_railway_queries()
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—â–∏
    items_ok = check_railway_items()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 60)
    
    print(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏: {'OK' if proxy_link_ok else 'FAIL'}")
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏: {'OK' if config_ok else 'FAIL'}")
    print(f"‚úÖ –ó–∞–ø—Ä–æ—Å—ã: {'OK' if queries_ok else 'FAIL'}")
    print(f"‚úÖ –í–µ—â–∏: {'OK' if items_ok else 'FAIL'}")
    
    if logs_analysis:
        print(f"üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:")
        print(f"  ‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'OK' if logs_analysis['scheduler_events'] > 0 else 'FAIL'}")
        print(f"  ‚Ä¢ –ü—Ä–æ–∫—Å–∏: {'OK' if logs_analysis['proxy_mentions'] > 0 else 'FAIL'}")
        print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞: {'OK' if logs_analysis['process_items_calls'] > 0 else 'FAIL'}")
        print(f"  ‚Ä¢ –û—à–∏–±–∫–∏ 403: {'FAIL' if logs_analysis['error_403_count'] > 0 else 'OK'}")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if not proxy_link_ok:
        print("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ URL")
    if not config_ok:
        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
    if logs_analysis and logs_analysis['error_403_count'] > 0:
        print("‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏ 403 - –ø—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
    if logs_analysis and logs_analysis['process_items_calls'] == 0:
        print("‚ùå process_items –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º")
    if logs_analysis and logs_analysis['proxy_mentions'] == 0:
        print("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

if __name__ == "__main__":
    main()